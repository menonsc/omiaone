version: '3.8'

services:
  frontend:
    image: menonsc/agentes-ia-frontend:latest
    ports:
      - "8080:80"
      - "8443:443"
    environment:
      - NODE_ENV=production
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_GOOGLE_GEMINI_API_KEY=${VITE_GOOGLE_GEMINI_API_KEY}
      - VITE_EVOLUTION_API_URL=${VITE_EVOLUTION_API_URL}
      - VITE_EVOLUTION_API_KEY=${VITE_EVOLUTION_API_KEY}
      - VITE_EVOLUTION_INSTANCE_NAME=${VITE_EVOLUTION_INSTANCE_NAME}
    depends_on:
      - supabase
      - redis
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  websocket-server:
    image: menonsc/agentes-ia-websocket:latest
    ports:
      - "3002:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  supabase:
    image: supabase/postgres:15.1.0.117
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD:-your-super-secret-and-long-postgres-password}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - supabase_data:/var/lib/postgresql/data
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: grafana/grafana:latest
    ports:
      - "4000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

volumes:
  supabase_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  network_public:
    driver: overlay 