version: '3.8'

services:
  # Frontend React SIMPLIFICADO
  frontend:
    image: nginx:alpine
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    networks:
      - network_public
    command: |
      sh -c "
      echo 'Criando p√°gina do frontend...'
      mkdir -p /usr/share/nginx/html
      cat > /usr/share/nginx/html/index.html << 'EOF'
      <!DOCTYPE html>
      <html lang=\"pt-BR\">
      <head>
          <meta charset=\"UTF-8\">
          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
          <title>Agentes de IA - 157.180.113.99</title>
          <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body { 
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                  min-height: 100vh; 
                  color: white; 
              }
              .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
              .header { text-align: center; margin-bottom: 3rem; }
              .header h1 { font-size: 3rem; margin-bottom: 1rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
              .header p { font-size: 1.2rem; opacity: 0.9; }
              .info { background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 10px; text-align: center; margin-bottom: 2rem; }
              .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1.5rem; margin-bottom: 3rem; }
              .service-card { 
                  background: rgba(255,255,255,0.1); 
                  backdrop-filter: blur(10px); 
                  border-radius: 15px; 
                  padding: 1.5rem; 
                  text-align: center; 
                  transition: all 0.3s ease; 
                  border: 1px solid rgba(255,255,255,0.2); 
              }
              .service-card:hover { transform: translateY(-5px); background: rgba(255,255,255,0.2); }
              .service-card h3 { font-size: 1.3rem; margin-bottom: 0.8rem; color: #fff; }
              .service-card p { margin-bottom: 1rem; opacity: 0.8; line-height: 1.5; font-size: 0.9rem; }
              .btn { 
                  display: inline-block; 
                  padding: 0.6rem 1.5rem; 
                  background: rgba(255,255,255,0.2); 
                  color: white; 
                  text-decoration: none; 
                  border-radius: 25px; 
                  transition: all 0.3s ease; 
                  border: 1px solid rgba(255,255,255,0.3); 
                  font-weight: 500; 
                  font-size: 0.9rem;
              }
              .btn:hover { background: rgba(255,255,255,0.3); transform: scale(1.05); }
              .status { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 1rem; }
              .status-item { background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; text-align: center; }
              .status-online { border-left: 4px solid #4CAF50; }
              .footer { text-align: center; margin-top: 3rem; opacity: 0.7; font-size: 0.9rem; }
          </style>
      </head>
      <body>
          <div class=\"container\">
              <div class=\"header\">
                  <h1>ü§ñ Agentes de IA</h1>
                  <p>Sistema de automa√ß√£o inteligente com WhatsApp e IA</p>
              </div>
              
              <div class=\"info\">
                  <h3>üåê Servidor Configurado</h3>
                  <p><strong>IP: 157.180.113.99</strong></p>
                  <p><strong>Dom√≠nio: producao.elevroi.com.br</strong></p>
              </div>
              
              <div class=\"services\">
                  <div class=\"service-card\">
                      <h3>üìä Grafana</h3>
                      <p>Dashboards e m√©tricas do sistema</p>
                      <a href=\"http://157.180.113.99:4000\" class=\"btn\" target=\"_blank\">Acessar</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üîç Prometheus</h3>
                      <p>Monitoramento de m√©tricas</p>
                      <a href=\"http://157.180.113.99:9090\" class=\"btn\" target=\"_blank\">Acessar</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üîå WebSocket</h3>
                      <p>Comunica√ß√£o em tempo real</p>
                      <a href=\"http://157.180.113.99:3002\" class=\"btn\" target=\"_blank\">Testar</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üóÑÔ∏è PostgreSQL</h3>
                      <p>Banco de dados principal</p>
                      <a href=\"#\" class=\"btn\" onclick=\"alert('PostgreSQL: 157.180.113.99:5433')\">Status</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üöÄ Redis</h3>
                      <p>Cache e sess√µes</p>
                      <a href=\"#\" class=\"btn\" onclick=\"alert('Redis: 157.180.113.99:6379')\">Status</a>
                  </div>
              </div>
              
              <div class=\"status\">
                  <div class=\"status-item status-online\">
                      <h4>üåê Frontend</h4>
                      <p>Online</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üóÑÔ∏è Database</h4>
                      <p>Conectado</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üìä Monitoring</h4>
                      <p>Ativo</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üöÄ Cache</h4>
                      <p>Rodando</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üîå WebSocket</h4>
                      <p>Conectado</p>
                  </div>
              </div>
              
              <div class=\"footer\">
                  <p>Agentes de IA v1.0 - Sistema de automa√ß√£o inteligente</p>
                  <p>Deploy realizado com Docker Swarm + Portainer</p>
                  <p>IP: <strong>157.180.113.99</strong> | Dom√≠nio: <strong>producao.elevroi.com.br</strong></p>
              </div>
          </div>
      </body>
      </html>
      EOF
      echo 'Frontend criado com sucesso!'
      nginx -g 'daemon off;'
      "
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # Banco de dados PostgreSQL
  supabase:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    ports:
      - target: 5432
        published: 5433
        protocol: tcp
        mode: host
    volumes:
      - supabase_data:/var/lib/postgresql/data
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - redis_data:/data
    networks:
      - network_public
    command: redis-server --appendonly yes
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # WebSocket Server SIMPLIFICADO
  websocket-server:
    image: node:20-alpine
    ports:
      - target: 3000
        published: 3002
        protocol: tcp
        mode: host
    networks:
      - network_public
    working_dir: /app
    command: |
      sh -c "
      echo 'Iniciando WebSocket Server...'
      cat > package.json << 'EOF'
      {
        \"name\": \"websocket-server\",
        \"version\": \"1.0.0\",
        \"dependencies\": {
          \"ws\": \"^8.14.2\",
          \"express\": \"^4.18.2\"
        }
      }
      EOF
      
      cat > server.js << 'EOF'
      const express = require('express');
      const WebSocket = require('ws');
      const http = require('http');
      
      const app = express();
      const server = http.createServer(app);
      const wss = new WebSocket.Server({ server });
      
      app.get('/', (req, res) => {
        res.send(`
        <!DOCTYPE html>
        <html lang=\"pt-BR\">
        <head>
          <title>WebSocket Test - Agentes de IA</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              padding: 20px; 
              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
              color: white; 
              min-height: 100vh; 
            }
            .container { 
              max-width: 800px; 
              margin: 0 auto; 
              background: rgba(255,255,255,0.1); 
              padding: 30px; 
              border-radius: 15px; 
            }
            .status { 
              padding: 15px; 
              border-radius: 8px; 
              margin: 15px 0; 
              font-weight: bold; 
            }
            .connected { background: rgba(76, 175, 80, 0.3); border: 2px solid #4CAF50; }
            .disconnected { background: rgba(244, 67, 54, 0.3); border: 2px solid #f44336; }
            button { 
              padding: 12px 24px; 
              margin: 8px; 
              cursor: pointer; 
              border: none; 
              border-radius: 6px; 
              font-size: 14px; 
              font-weight: bold; 
            }
            .btn-connect { background: #4CAF50; color: white; }
            .btn-disconnect { background: #f44336; color: white; }
            .btn-send { background: #2196F3; color: white; }
            #messages { 
              border: 2px solid rgba(255,255,255,0.3); 
              height: 300px; 
              overflow-y: auto; 
              padding: 15px; 
              margin: 15px 0; 
              background: rgba(0,0,0,0.3); 
              border-radius: 8px; 
              font-family: monospace; 
            }
            .message { 
              margin: 5px 0; 
              padding: 5px; 
              border-left: 3px solid #2196F3; 
              background: rgba(255,255,255,0.1); 
            }
            h1 { text-align: center; margin-bottom: 30px; }
            .info { 
              text-align: center; 
              background: rgba(255,255,255,0.2); 
              padding: 10px; 
              border-radius: 8px; 
              margin-bottom: 20px; 
            }
          </style>
        </head>
        <body>
          <div class=\"container\">
            <h1>üîå WebSocket Test - Agentes de IA</h1>
            <div class=\"info\">
              <strong>IP: 157.180.113.99</strong><br>
              WebSocket URL: ws://157.180.113.99:3002
            </div>
            
            <div id=\"status\" class=\"status disconnected\">‚ùå Desconectado</div>
            
            <div style=\"text-align: center; margin: 20px 0;\">
              <button class=\"btn-connect\" onclick=\"connect()\">üîó Conectar</button>
              <button class=\"btn-disconnect\" onclick=\"disconnect()\">üîå Desconectar</button>
              <button class=\"btn-send\" onclick=\"sendMessage()\">üì§ Enviar Teste</button>
            </div>
            
            <div id=\"messages\"></div>
            
            <div style=\"text-align: center; margin-top: 20px; opacity: 0.8;\">
              <small>ü§ñ Sistema de WebSocket dos Agentes de IA</small>
            </div>
          </div>
          
          <script>
            let ws = null;
            const status = document.getElementById('status');
            const messages = document.getElementById('messages');
            
            function connect() {
              try {
                ws = new WebSocket('ws://157.180.113.99:3002');
                
                ws.onopen = () => {
                  status.innerHTML = '‚úÖ Conectado ao WebSocket!';
                  status.className = 'status connected';
                  addMessage('‚úÖ Conectado com sucesso!');
                };
                
                ws.onmessage = (event) => {
                  addMessage('üì® Recebido: ' + event.data);
                };
                
                ws.onclose = () => {
                  status.innerHTML = '‚ùå Desconectado';
                  status.className = 'status disconnected';
                  addMessage('‚ùå Conex√£o fechada');
                };
                
                ws.onerror = (error) => {
                  addMessage('üö® Erro na conex√£o');
                };
              } catch (error) {
                addMessage('üö® Erro ao conectar: ' + error.message);
              }
            }
            
            function disconnect() {
              if (ws) {
                ws.close();
                ws = null;
              }
            }
            
            function sendMessage() {
              if (ws && ws.readyState === WebSocket.OPEN) {
                const now = new Date();
                const message = 'Teste - ' + now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
                ws.send(message);
                addMessage('üì§ Enviado: ' + message);
              } else {
                addMessage('‚ùå WebSocket n√£o conectado');
              }
            }
            
            function addMessage(msg) {
              const div = document.createElement('div');
              div.className = 'message';
              const now = new Date();
              const time = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();
              div.innerHTML = '<strong>' + time + '</strong> - ' + msg;
              messages.appendChild(div);
              messages.scrollTop = messages.scrollHeight;
            }
            
            window.onload = () => {
              addMessage('üåê P√°gina carregada. Clique em Conectar para testar.');
            };
          </script>
        </body>
        </html>
        `);
      });
      
      wss.on('connection', function connection(ws, req) {
        console.log('üîå Nova conex√£o WebSocket de:', req.socket.remoteAddress);
        ws.send('ü§ñ Bem-vindo ao WebSocket dos Agentes de IA!');
        
        ws.on('message', function incoming(message) {
          console.log('üì® Mensagem:', message.toString());
          ws.send('üîÑ Echo: ' + message.toString());
        });
        
        ws.on('close', function() {
          console.log('‚ùå Conex√£o fechada');
        });
      });
      
      const PORT = process.env.PORT || 3000;
      server.listen(PORT, '0.0.0.0', () => {
        console.log('‚úÖ WebSocket Server rodando na porta ' + PORT);
        console.log('üåê Teste em: http://157.180.113.99:3002');
        console.log('üì° WebSocket URL: ws://157.180.113.99:3002');
      });
      EOF
      
      npm install --no-package-lock --quiet
      node server.js
      "
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # Grafana para visualiza√ß√£o
  grafana:
    image: grafana/grafana:latest
    ports:
      - target: 3000
        published: 4000
        protocol: tcp
        mode: host
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=157.180.113.99
      - GF_SERVER_ROOT_URL=http://157.180.113.99:4000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - network_public
    user: "472"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host
    volumes:
      - prometheus_data:/prometheus
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

volumes:
  supabase_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  network_public:
    external: true 