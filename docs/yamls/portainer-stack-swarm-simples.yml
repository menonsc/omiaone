version: '3.8'

services:
  # Frontend React
  frontend:
    image: nginx:alpine
    environment:
      - NODE_ENV=production
    networks:
      - network_public
    command: |
      sh -c "
      cat > /usr/share/nginx/html/index.html << 'EOF'
      <!DOCTYPE html>
      <html lang=\"pt-BR\">
      <head>
          <meta charset=\"UTF-8\">
          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
          <title>Agentes de IA - producao.elevroi.com.br</title>
          <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; color: white; }
              .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
              .header { text-align: center; margin-bottom: 3rem; }
              .header h1 { font-size: 3rem; margin-bottom: 1rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
              .header p { font-size: 1.2rem; opacity: 0.9; }
              .domain { background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 10px; text-align: center; margin-bottom: 2rem; }
              .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin-bottom: 3rem; }
              .service-card { background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); border-radius: 15px; padding: 2rem; text-align: center; transition: all 0.3s ease; border: 1px solid rgba(255,255,255,0.2); }
              .service-card:hover { transform: translateY(-5px); background: rgba(255,255,255,0.2); }
              .service-card h3 { font-size: 1.5rem; margin-bottom: 1rem; color: #fff; }
              .service-card p { margin-bottom: 1.5rem; opacity: 0.8; line-height: 1.6; }
              .btn { display: inline-block; padding: 0.8rem 2rem; background: rgba(255,255,255,0.2); color: white; text-decoration: none; border-radius: 25px; transition: all 0.3s ease; border: 1px solid rgba(255,255,255,0.3); font-weight: 500; }
              .btn:hover { background: rgba(255,255,255,0.3); transform: scale(1.05); }
              .status { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; }
              .status-item { background: rgba(255,255,255,0.1); padding: 1rem; border-radius: 10px; text-align: center; }
              .status-online { border-left: 4px solid #4CAF50; }
              .footer { text-align: center; margin-top: 3rem; opacity: 0.7; }
          </style>
      </head>
      <body>
          <div class=\"container\">
              <div class=\"header\">
                  <h1>ü§ñ Agentes de IA</h1>
                  <p>Sistema de automa√ß√£o inteligente com WhatsApp e IA</p>
              </div>
              
              <div class=\"domain\">
                  <h3>üåê Dom√≠nio Configurado</h3>
                  <p><strong>producao.elevroi.com.br</strong></p>
              </div>
              
              <div class=\"services\">
                  <div class=\"service-card\">
                      <h3>üìä Grafana</h3>
                      <p>Dashboards e m√©tricas do sistema em tempo real</p>
                      <a href=\"https://producao.elevroi.com.br:4000\" class=\"btn\" target=\"_blank\">Acessar Grafana</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üîç Prometheus</h3>
                      <p>Monitoramento e coleta de m√©tricas dos servi√ßos</p>
                      <a href=\"https://producao.elevroi.com.br:9090\" class=\"btn\" target=\"_blank\">Acessar Prometheus</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üóÑÔ∏è PostgreSQL</h3>
                      <p>Banco de dados principal do sistema</p>
                      <a href=\"#\" class=\"btn\" onclick=\"alert('PostgreSQL rodando na porta 5433')\">Status: Online</a>
                  </div>
                  
                  <div class=\"service-card\">
                      <h3>üöÄ Redis</h3>
                      <p>Cache e sess√µes do sistema</p>
                      <a href=\"#\" class=\"btn\" onclick=\"alert('Redis rodando na porta 6379')\">Status: Online</a>
                  </div>
              </div>
              
              <div class=\"status\">
                  <div class=\"status-item status-online\">
                      <h4>üåê Frontend</h4>
                      <p>Online</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üóÑÔ∏è Database</h4>
                      <p>Conectado</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üìä Monitoring</h4>
                      <p>Ativo</p>
                  </div>
                  <div class=\"status-item status-online\">
                      <h4>üöÄ Cache</h4>
                      <p>Rodando</p>
                  </div>
              </div>
              
              <div class=\"footer\">
                  <p>Agentes de IA v1.0 - Sistema de automa√ß√£o inteligente</p>
                  <p>Deploy realizado com Docker Swarm + Portainer</p>
                  <p>Dom√≠nio: <strong>producao.elevroi.com.br</strong></p>
              </div>
          </div>
      </body>
      </html>
      EOF
      nginx -g 'daemon off;'
      "
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # Banco de dados PostgreSQL
  supabase:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    ports:
      - target: 5432
        published: 5433
        protocol: tcp
        mode: host
    volumes:
      - supabase_data:/var/lib/postgresql/data
    networks:
      - network_public
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    volumes:
      - redis_data:/data
    networks:
      - network_public
    command: redis-server --appendonly yes
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana para visualiza√ß√£o
  grafana:
    image: grafana/grafana:latest
    ports:
      - target: 3000
        published: 4000
        protocol: tcp
        mode: host
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=producao.elevroi.com.br
      - GF_SERVER_ROOT_URL=https://producao.elevroi.com.br:4000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - network_public
    user: "472"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

  # Prometheus simples
  prometheus:
    image: prom/prometheus:latest
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: host
    volumes:
      - prometheus_data:/prometheus
    networks:
      - network_public
    # Usando configura√ß√£o padr√£o do Prometheus sem comandos complexos
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints:
          - node.role == manager

volumes:
  supabase_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  network_public:
    external: true 