#!/usr/bin/env node

/**
 * Script para verificar se WebSocket est√° habilitado na Evolution API
 * Execute: node check-websocket-support.js
 */

const fetch = require('node-fetch')

async function checkWebSocketSupport() {
  const baseURL = process.env.VITE_EVOLUTION_API_URL || 'http://localhost:8080'
  const apiKey = process.env.VITE_EVOLUTION_API_KEY || 'your-api-key'
  
  console.log('üîç Verificando suporte a WebSocket na Evolution API...')
  console.log('üìç URL:', baseURL)
  console.log('üîë API Key:', apiKey ? '***' + apiKey.slice(-4) : 'undefined')
  
  try {
    // Teste 1: Verificar se o servidor est√° rodando
    console.log('\n1Ô∏è‚É£ Testando conectividade b√°sica...')
    const healthResponse = await fetch(`${baseURL}/health`, {
      method: 'GET',
      headers: { 'apikey': apiKey }
    })
    
    if (healthResponse.ok) {
      console.log('‚úÖ Servidor Evolution API est√° rodando')
    } else {
      console.log('‚ùå Servidor n√£o respondeu corretamente')
      return
    }
    
    // Teste 2: Verificar se WebSocket est√° habilitado
    console.log('\n2Ô∏è‚É£ Verificando suporte a WebSocket...')
    const wsTestResponse = await fetch(`${baseURL}/socket.io/`, {
      method: 'GET',
      headers: { 'apikey': apiKey }
    })
    
    if (wsTestResponse.ok) {
      console.log('‚úÖ WebSocket est√° habilitado na Evolution API')
      console.log('üì° Endpoint WebSocket dispon√≠vel')
    } else {
      console.log('‚ùå WebSocket n√£o est√° habilitado')
      console.log('üí° Para habilitar, configure WEBSOCKET_ENABLED=true no servidor')
    }
    
    // Teste 3: Verificar inst√¢ncias dispon√≠veis
    console.log('\n3Ô∏è‚É£ Verificando inst√¢ncias dispon√≠veis...')
    const instancesResponse = await fetch(`${baseURL}/instance/fetchInstances`, {
      method: 'GET',
      headers: { 'apikey': apiKey }
    })
    
    if (instancesResponse.ok) {
      const instances = await instancesResponse.json()
      console.log('‚úÖ Inst√¢ncias encontradas:', instances.length)
      instances.forEach(instance => {
        console.log(`   - ${instance.instance?.instanceName || 'N/A'}: ${instance.instance?.status || 'N/A'}`)
      })
    } else {
      console.log('‚ùå Erro ao buscar inst√¢ncias')
    }
    
    // Teste 4: Verificar estrutura do banco de dados
    console.log('\n4Ô∏è‚É£ Verificando estrutura do banco de dados...')
    try {
      const chatsResponse = await fetch(`${baseURL}/chat/findChats/test-instance`, {
        method: 'POST',
        headers: { 
          'apikey': apiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({})
      })
      
      if (chatsResponse.ok) {
        console.log('‚úÖ Estrutura do banco de dados est√° OK')
      } else {
        const errorText = await chatsResponse.text()
        if (errorText.includes('updatedat')) {
          console.log('‚ùå Problema detectado: coluna "updatedat" n√£o existe')
          console.log('üí° Solu√ß√£o: Atualizar o banco de dados da Evolution API')
        } else {
          console.log('‚ùå Erro no banco de dados:', errorText)
        }
      }
    } catch (error) {
      console.log('‚ùå Erro ao testar estrutura do banco:', error.message)
    }
    
    console.log('\nüéØ Resumo:')
    console.log('‚úÖ Servidor Evolution API: OK')
    console.log(wsTestResponse.ok ? '‚úÖ WebSocket: Habilitado' : '‚ùå WebSocket: Desabilitado')
    console.log('‚úÖ Inst√¢ncias: Verificadas')
    
    if (wsTestResponse.ok) {
      console.log('\nüöÄ WebSocket est√° pronto para uso!')
      console.log('üìù URL de conex√£o: ' + baseURL.replace(/^http/, 'ws') + '/{nome_instancia}')
    } else {
      console.log('\n‚ö†Ô∏è  Para usar WebSocket, configure no servidor:')
      console.log('   WEBSOCKET_ENABLED=true')
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error.message)
  }
}

// Executar verifica√ß√£o
checkWebSocketSupport() 