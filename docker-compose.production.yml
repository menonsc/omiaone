version: '3.8'

services:
  # Aplicação Frontend
  agentes-ia-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agentes-ia-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_EVOLUTION_API_URL=${VITE_EVOLUTION_API_URL}
      - VITE_WEBSOCKET_URL=${VITE_WEBSOCKET_URL}
      - VITE_YAMPI_API_URL=${VITE_YAMPI_API_URL}
    networks:
      - agentes-network
    depends_on:
      - websocket-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Servidor WebSocket
  websocket-server:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: agentes-ia-websocket
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - CORS_ORIGIN=${CORS_ORIGIN}
      - SUPABASE_URL=${VITE_SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    networks:
      - agentes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Evolution API (WhatsApp)
  evolution-api:
    image: atendai/evolution-api:v2.0.0
    container_name: agentes-ia-evolution
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - CORS_ORIGIN=${CORS_ORIGIN}
      - CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_CREDENTIALS=true
      - LOG_LEVEL=ERROR
      - LOG_COLOR=false
      - LOG_BAILEYS=error
      - DEL_INSTANCE=false
      - PROVIDER_ENABLED=false
      - PROVIDER_HOST=127.0.0.1
      - PROVIDER_PORT=5672
      - PROVIDER_USERNAME=guest
      - PROVIDER_PASSWORD=guest
      - DATABASE_ENABLED=true
      - DATABASE_CONNECTION_URI=${DATABASE_CONNECTION_URI}
      - DATABASE_CONNECTION_CLIENT_NAME=evolution_api
      - REDIS_ENABLED=false
      - REDIS_URI=redis://redis:6379
      - REDIS_PREFIX_KEY=evolution_api
      - CACHE_REDIS_ENABLED=false
      - CACHE_REDIS_URI=redis://redis:6379
      - CACHE_REDIS_PREFIX_KEY=evolution_api_cache
      - CACHE_REDIS_TTL=604800
      - CACHE_LOCAL_ENABLED=false
      - S3_ENABLED=false
      - WEBHOOK_GLOBAL_ENABLED=false
      - WEBHOOK_GLOBAL_URL=${WEBHOOK_GLOBAL_URL}
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      - CONFIG_SESSION_PHONE_CLIENT=MyAppName
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - QRCODE_LIMIT=30
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=${EVOLUTION_API_KEY}
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      - TYPEBOT_ENABLED=false
      - CHATWOOT_ENABLED=false
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    networks:
      - agentes-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis (Cache)
  redis:
    image: redis:7-alpine
    container_name: agentes-ia-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - agentes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (se necessário para dados locais)
  postgres:
    image: postgres:15-alpine
    container_name: agentes-ia-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - agentes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Load Balancer/Proxy)
  nginx:
    image: nginx:alpine
    container_name: agentes-ia-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/log/nginx:/var/log/nginx
    networks:
      - agentes-network
    depends_on:
      - agentes-ia-frontend
      - websocket-server
      - evolution-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Monitoramento)
  prometheus:
    image: prom/prometheus:latest
    container_name: agentes-ia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - agentes-network

  # Grafana (Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: agentes-ia-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - agentes-network
    depends_on:
      - prometheus

volumes:
  evolution_instances:
    driver: local
  evolution_store:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agentes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 