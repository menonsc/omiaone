// Script para testar a movimenta√ß√£o dos n√≥s
// Execute este script no console do navegador na p√°gina do Flow Builder

console.log('üß™ Testando movimenta√ß√£o dos n√≥s...')

// Fun√ß√£o para verificar se os n√≥s podem ser movidos
function testNodeMovement() {
  try {
    console.log('üîç Verificando movimenta√ß√£o dos n√≥s...')
    
    // Verificar se h√° n√≥s no canvas
    const nodes = document.querySelectorAll('.react-flow__node')
    console.log('üîó N√≥s encontrados:', nodes.length)
    
    if (nodes.length === 0) {
      console.log('‚ö†Ô∏è Nenhum n√≥ encontrado. Adicione alguns n√≥s primeiro.')
      return false
    }
    
    // Verificar se os n√≥s t√™m a classe de draggable
    const draggableNodes = document.querySelectorAll('.react-flow__node[draggable="true"]')
    console.log('üéØ N√≥s draggable:', draggableNodes.length)
    
    // Verificar se h√° n√≥s selecion√°veis
    const selectableNodes = document.querySelectorAll('.react-flow__node')
    console.log('üìå N√≥s selecion√°veis:', selectableNodes.length)
    
    // Verificar se o React Flow est√° funcionando
    const reactFlowInstance = document.querySelector('.react-flow__viewport')
    console.log('üéØ React Flow instance:', !!reactFlowInstance)
    
    // Verificar se h√° erros no console
    const consoleErrors = window.consoleErrors || []
    console.log('‚ùå Erros no console:', consoleErrors.length)
    
    return {
      totalNodes: nodes.length,
      draggableNodes: draggableNodes.length,
      selectableNodes: selectableNodes.length,
      reactFlowAvailable: !!reactFlowInstance,
      consoleErrors: consoleErrors.length
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar movimenta√ß√£o:', error)
    return null
  }
}

// Fun√ß√£o para simular movimenta√ß√£o de um n√≥
function simulateNodeMovement() {
  try {
    console.log('üñ±Ô∏è Simulando movimenta√ß√£o de n√≥...')
    
    // Encontrar o primeiro n√≥
    const firstNode = document.querySelector('.react-flow__node')
    if (!firstNode) {
      console.error('‚ùå Nenhum n√≥ encontrado para testar')
      return false
    }
    
    console.log('üìå N√≥ encontrado:', firstNode)
    
    // Verificar se o n√≥ tem eventos de mouse
    const hasMouseEvents = firstNode.onmousedown || firstNode.onmousedown !== null
    console.log('üñ±Ô∏è Eventos de mouse dispon√≠veis:', hasMouseEvents)
    
    // Verificar se o n√≥ tem a propriedade draggable
    const isDraggable = firstNode.draggable
    console.log('üéØ N√≥ √© draggable:', isDraggable)
    
    // Verificar se o n√≥ tem cursor pointer
    const hasPointerCursor = window.getComputedStyle(firstNode).cursor === 'pointer'
    console.log('üëÜ Cursor pointer:', hasPointerCursor)
    
    return {
      nodeFound: !!firstNode,
      hasMouseEvents,
      isDraggable,
      hasPointerCursor
    }
  } catch (error) {
    console.error('‚ùå Erro ao simular movimenta√ß√£o:', error)
    return false
  }
}

// Fun√ß√£o para verificar se h√° conflitos de CSS
function checkCSSConflicts() {
  try {
    console.log('üé® Verificando conflitos de CSS...')
    
    // Verificar se h√° estilos que podem interferir na movimenta√ß√£o
    const nodes = document.querySelectorAll('.react-flow__node')
    const conflicts = []
    
    nodes.forEach((node, index) => {
      const styles = window.getComputedStyle(node)
      
      // Verificar propriedades que podem interferir
      const problematicProps = {
        'pointer-events': styles.pointerEvents,
        'user-select': styles.userSelect,
        'position': styles.position,
        'z-index': styles.zIndex
      }
      
      // Verificar se h√° problemas
      if (problematicProps['pointer-events'] === 'none') {
        conflicts.push(`Node ${index}: pointer-events: none`)
      }
      if (problematicProps['user-select'] === 'none') {
        conflicts.push(`Node ${index}: user-select: none`)
      }
      
      console.log(`üìã Node ${index} styles:`, problematicProps)
    })
    
    console.log('‚ö†Ô∏è Poss√≠veis conflitos:', conflicts)
    return conflicts
  } catch (error) {
    console.error('‚ùå Erro ao verificar CSS:', error)
    return []
  }
}

// Fun√ß√£o para verificar se o React Flow est√° configurado corretamente
function checkReactFlowConfig() {
  try {
    console.log('‚öôÔ∏è Verificando configura√ß√£o do React Flow...')
    
    // Verificar se o ReactFlow est√° renderizado
    const reactFlow = document.querySelector('.react-flow')
    console.log('üéØ ReactFlow encontrado:', !!reactFlow)
    
    // Verificar se h√° controles
    const controls = document.querySelector('.react-flow__controls')
    console.log('üéÆ Controles encontrados:', !!controls)
    
    // Verificar se h√° background
    const background = document.querySelector('.react-flow__background')
    console.log('üé® Background encontrado:', !!background)
    
    // Verificar se h√° viewport
    const viewport = document.querySelector('.react-flow__viewport')
    console.log('üîç Viewport encontrado:', !!viewport)
    
    // Verificar se h√° pane
    const pane = document.querySelector('.react-flow__pane')
    console.log('üìã Pane encontrado:', !!pane)
    
    return {
      reactFlow: !!reactFlow,
      controls: !!controls,
      background: !!background,
      viewport: !!viewport,
      pane: !!pane
    }
  } catch (error) {
    console.error('‚ùå Erro ao verificar configura√ß√£o:', error)
    return null
  }
}

// Fun√ß√£o principal de diagn√≥stico
function diagnoseNodeMovement() {
  console.log('üöÄ Iniciando diagn√≥stico de movimenta√ß√£o...')
  
  // 1. Verificar estado atual
  const state = testNodeMovement()
  console.log('üìä Estado atual:', state)
  
  // 2. Verificar configura√ß√£o do React Flow
  const config = checkReactFlowConfig()
  console.log('‚öôÔ∏è Configura√ß√£o:', config)
  
  // 3. Verificar conflitos de CSS
  const conflicts = checkCSSConflicts()
  console.log('üé® Conflitos CSS:', conflicts.length)
  
  // 4. Simular movimenta√ß√£o
  const movement = simulateNodeMovement()
  console.log('üñ±Ô∏è Movimenta√ß√£o:', movement)
  
  // Resumo
  console.log('üìã RESUMO DO DIAGN√ìSTICO:')
  console.log('- N√≥s encontrados:', state?.totalNodes || 0)
  console.log('- N√≥s draggable:', state?.draggableNodes || 0)
  console.log('- React Flow configurado:', config?.reactFlow ? '‚úÖ OK' : '‚ùå PROBLEMA')
  console.log('- Conflitos CSS:', conflicts.length > 0 ? '‚ùå PROBLEMA' : '‚úÖ OK')
  console.log('- Movimenta√ß√£o poss√≠vel:', movement?.isDraggable ? '‚úÖ OK' : '‚ùå PROBLEMA')
  
  if (state?.draggableNodes === 0) {
    console.log('üí° SUGEST√ÉO: Os n√≥s n√£o est√£o configurados como draggable')
  }
  
  if (conflicts.length > 0) {
    console.log('üí° SUGEST√ÉO: H√° conflitos de CSS que podem interferir na movimenta√ß√£o')
  }
  
  if (!config?.reactFlow) {
    console.log('üí° SUGEST√ÉO: React Flow n√£o est√° configurado corretamente')
  }
  
  return {
    state,
    config,
    conflicts,
    movement
  }
}

// Fun√ß√£o para testar movimenta√ß√£o manual
function testManualMovement() {
  try {
    console.log('üñ±Ô∏è Testando movimenta√ß√£o manual...')
    
    // Encontrar um n√≥
    const node = document.querySelector('.react-flow__node')
    if (!node) {
      console.log('‚ö†Ô∏è Nenhum n√≥ encontrado para testar')
      return false
    }
    
    console.log('üìå Testando movimenta√ß√£o do n√≥:', node)
    
    // Simular evento de mouse down
    const mouseDownEvent = new MouseEvent('mousedown', {
      bubbles: true,
      cancelable: true,
      clientX: 100,
      clientY: 100
    })
    
    node.dispatchEvent(mouseDownEvent)
    console.log('üñ±Ô∏è Mouse down disparado')
    
    // Simular movimento do mouse
    const mouseMoveEvent = new MouseEvent('mousemove', {
      bubbles: true,
      cancelable: true,
      clientX: 150,
      clientY: 150
    })
    
    document.dispatchEvent(mouseMoveEvent)
    console.log('üñ±Ô∏è Mouse move disparado')
    
    // Simular mouse up
    const mouseUpEvent = new MouseEvent('mouseup', {
      bubbles: true,
      cancelable: true,
      clientX: 150,
      clientY: 150
    })
    
    document.dispatchEvent(mouseUpEvent)
    console.log('üñ±Ô∏è Mouse up disparado')
    
    console.log('‚úÖ Teste de movimenta√ß√£o manual conclu√≠do')
    return true
    
  } catch (error) {
    console.error('‚ùå Erro no teste manual:', error)
    return false
  }
}

// Expor fun√ß√µes para uso manual
window.nodeMovementTest = {
  testNodeMovement,
  simulateNodeMovement,
  checkCSSConflicts,
  checkReactFlowConfig,
  diagnoseNodeMovement,
  testManualMovement
}

console.log('‚úÖ Teste de movimenta√ß√£o dos n√≥s carregado!')
console.log('üí° Use window.nodeMovementTest.diagnoseNodeMovement() para diagn√≥stico completo')
console.log('üí° Use window.nodeMovementTest.testManualMovement() para teste manual') 